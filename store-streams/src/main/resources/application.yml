spring:
  application:
    name: store-streams
  cloud:
    stream:
      bindings:
        customer-input:
          destination: mysql.storedb.customers
          group: storeStreamsGroup
          consumer:
            useNativeDecoding: true
        product-input:
          destination: mysql.storedb.products
          group: storeStreamsGroup
          consumer:
            useNativeDecoding: true
        order-input:
          destination: mysql.storedb.orders
          group: storeStreamsGroup
          consumer:
            useNativeDecoding: true
        order-product-input:
          destination: mysql.storedb.orders_products
          group: storeStreamsGroup
          consumer:
            useNativeDecoding: true
        order-output:
          destination: store.streams.orders
          producer:
            useNativeEncoding: true
      kafka:
        streams:
          bindings:
            customer-input:
              consumer:
                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
                valueSerde: com.mycompany.storestreams.serde.json.CustomerJsonSerde
                materializedAs: ktable.customers
            product-input:
              consumer:
                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
                valueSerde: com.mycompany.storestreams.serde.json.ProductJsonSerde
                materializedAs: ktable.products
            order-input:
              consumer:
                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
                valueSerde: com.mycompany.storestreams.serde.json.OrderJsonSerde
            order-product-input:
              consumer:
                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
                valueSerde: com.mycompany.storestreams.serde.json.OrderProductJsonSerde
            order-output:
              producer:
                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
                valueSerde: com.mycompany.storestreams.serde.json.OrderDetailedJsonSerde
          binder:
            brokers: localhost:29092
            configuration:
              commit.interval.ms: 1000
              default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
              default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde

management:
  endpoints:
    web:
      exposure.include: beans, env, health, info, metrics, mappings
  endpoint:
    health:
      show-details: always

---
spring:
  config:
    activate.on-profile: avro
  cloud:
    stream:
      kafka:
        streams:
          bindings:
            customer-input:
              consumer:
                valueSerde: com.mycompany.storestreams.serde.avro.CustomerAvroSerde
            product-input:
              consumer:
                valueSerde: com.mycompany.storestreams.serde.avro.ProductAvroSerde
            order-input:
              consumer:
                valueSerde: com.mycompany.storestreams.serde.avro.OrderAvroSerde
            order-product-input:
              consumer:
                valueSerde: com.mycompany.storestreams.serde.avro.OrderProductAvroSerde
            order-output:
              producer:
                valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde
          binder:
            configuration:
              schema.registry.url: http://localhost:8081
