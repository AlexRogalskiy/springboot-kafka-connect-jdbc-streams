server.port: 9081

spring:
  application:
    name: store-streams
  cloud:
    stream:
      bindings:
        customer-input:
          destination: mysql.storedb.customers
          group: storeStreamsGroup
          consumer:
            nativeDecoding: true
        product-input:
          destination: mysql.storedb.products
          group: storeStreamsGroup
          consumer:
            nativeDecoding: true
        order-input:
          destination: mysql.storedb.orders
          group: storeStreamsGroup
          consumer:
            nativeDecoding: true
        order-product-input:
          destination: mysql.storedb.orders_products
          group: storeStreamsGroup
          consumer:
            nativeDecoding: true
        order-output:
          destination: store.streams.orders
          producer:
            nativeEncoding: true
      kafka:
        streams:
          bindings:
            customer-input:
              consumer:
                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
                valueSerde: com.mycompany.storestreams.serde.json.CustomerJsonSerde
                materializedAs: ktable.customers
            product-input:
              consumer:
                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
                valueSerde: com.mycompany.storestreams.serde.json.ProductJsonSerde
                materializedAs: ktable.products
#            order-input:
#              consumer:
#                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
#                valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde
#            order-product-input:
#              consumer:
#                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
#                valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde
#            order-output:
#              producer:
#                keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
#                valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde
          binder:
            brokers: localhost:29092
            configuration:
              schema.registry.url: http://localhost:8081
              commit.interval.ms: 1000
              default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
              default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
management:
  security:
    enabled: false
  endpoints:
    web:
      exposure.include: "*"
  endpoint:
    health:
      show-details: always
  health:
    binders:
      enabled: true

---
spring:
  profiles: avro
  cloud:
    stream:
      schema-registry-client:
        endpoint: http://localhost:8081
      schema:
        avro:
          dynamic-schema-generation-enabled: true
#      bindings:
#        order-input:
#          content-type: application/*+avro
#          consumer:
#            nativeDecoding: true
#        order-output:
#          content-type: application/*+avro
#          producer:
#            nativeEncoding: true
